package com.xchanging.xcc.beans.manager;import java.sql.DriverManager;import java.sql.SQLException;import java.util.Collection;import java.util.HashMap;import javax.ejb.SessionContext;import javax.naming.Context;import javax.naming.InitialContext;import javax.naming.NamingException;import javax.resource.ResourceException;import javax.resource.cci.ConnectionFactory;import javax.resource.cci.RecordFactory;import com.xchanging.xcc.cics.handlers.CICSHandler;import com.xchanging.xcc.events.ClaimsEvent;import com.xchanging.xcc.exceptions.ClaimsErrorException;import com.xchanging.xcc.exceptions.ClaimsWarningException;import com.xchanging.xcc.exceptions.GeneralFailureException;import com.xchanging.xcc.jdbc.handlers.JDBCHandler;import com.xchanging.xcc.logging.Logger;import com.xchanging.xcc.utils.Keys;public class StateMachine implements java.io.Serializable {    HashMap handlerMap;  ModelUpdateManager mum;  private java.sql.Connection jdbcCon;  public javax.resource.cci.ConnectionFactory cf;  private String dbAccess;  private long startTime;  public StateMachine() {    handlerMap = new HashMap();    this.mum = new ModelUpdateManager();    try {      Context ic = new InitialContext();      this.cf = (ConnectionFactory)ic.lookup("eis/attunityCICS");    }    catch (NamingException ne) {      throw new GeneralFailureException(ne.getMessage());    }    OracleDB db = new OracleDB(Keys.getWebAppPath() + "/xml/oracle-db.xml");    if (db.isValid()) {      try {        DriverManager.registerDriver (new oracle.jdbc.OracleDriver());        jdbcCon = DriverManager.getConnection ("jdbc:oracle:thin:"+db.getUser()+"/"+db.getPassword()+"@"+db.getServer()+":"+db.getPort()+":"+db.getListener());      }      catch (SQLException sqlE) {        throw new GeneralFailureException(sqlE.getMessage());      }    }  }  public java.sql.Connection getJdbcConnection() {    return jdbcCon;  }  public void closeJdbcConnection() {    try {      jdbcCon.close();    }    catch (SQLException sqlE) {      sqlE.printStackTrace();    }  }  /*    This constructor only used when EJB is enabled  */  public StateMachine(SessionContext sc) {    handlerMap = new HashMap();    this.mum = new ModelUpdateManager();      try {        Context ic = new InitialContext();        String name = "eis/attunityCICS";        this.cf = (ConnectionFactory)ic.lookup(name);      }      catch (NamingException ne) {        throw new GeneralFailureException(ne.getMessage());      }  }  public void closeConnection() {    if (jdbcCon != null) {      closeJdbcConnection();    }  }  public RecordFactory getRecordFactory() {    try {      return cf.getRecordFactory();    }    catch (ResourceException re) {      Logger.error("StateMachine - Error allocating RecordFactory");      re.printStackTrace();      return null;    }  }  public Collection handleEvent(ClaimsEvent ce) throws GeneralFailureException, ClaimsErrorException, ClaimsWarningException {    String eventName = ce.getName();      CICSHandler cicsHandler = null;      JDBCHandler jdbcHandler = null;      if (eventName != null) {        //String handlerName = getHandlerName(eventName);        String handlerName = ce.getHandlerName();        try {          if (handlerMap.get(eventName) != null) {            if (ce.isOracleEvent()) {              jdbcHandler = (JDBCHandler)handlerMap.get(eventName);            }            else {              cicsHandler = (CICSHandler)handlerMap.get(eventName);            }          }          else {            if (ce.isOracleEvent()) {              jdbcHandler = (JDBCHandler)Class.forName(handlerName).newInstance();              handlerMap.put(eventName, jdbcHandler);            }            else {              cicsHandler = (CICSHandler)Class.forName(handlerName).newInstance();              handlerMap.put(eventName, cicsHandler);            }          }        }        catch (Exception ex) {          Logger.error("StateMachine - Error instantiating Handler object - " + ce.getHandlerName());          ex.printStackTrace();        }        if (ce.isOracleEvent()) {          jdbcHandler.perform(ce,this);          return mum.getUpdatedModels(ce, jdbcHandler.getResults());        }        if (CICSHandler.ignoreErrors)          CICSHandler.ignoreErrors = false;        else if ((cicsHandler != null) && (!cicsHandler.ignoreWarnings)) {          try {            cicsHandler.init(this);            startTimer();            cicsHandler.perform(ce,this);            stopTimer(cicsHandler.getClass().getName().substring(cicsHandler.getClass().getName().lastIndexOf(".")+1));            cicsHandler.closeConnections();          } catch (GeneralFailureException e) {            stopTimer(cicsHandler.getClass().getName().substring(cicsHandler.getClass().getName().lastIndexOf(".")+1));            cicsHandler.closeConnections();            throw e;          } catch (ClaimsErrorException e) {            stopTimer(cicsHandler.getClass().getName().substring(cicsHandler.getClass().getName().lastIndexOf(".")+1));            cicsHandler.closeConnections();            throw e;          } catch (ClaimsWarningException e) {            stopTimer(cicsHandler.getClass().getName().substring(cicsHandler.getClass().getName().lastIndexOf(".")+1));            cicsHandler.closeConnections();            throw e;          }        }      }      return mum.getUpdatedModels(ce,cicsHandler.getResults());  }  private String getHandlerName(String eventName) {    try {      InitialContext ic = new InitialContext();      return (String)ic.lookup(eventName);    }    catch (javax.naming.NamingException ex) {      Logger.error("StateMachine - Error performing lookup of CICS Handler via JNDI");      ex.printStackTrace();    }    return null;  }  private void stopTimer(String name) {    long endTime = System.currentTimeMillis();    Logger.info(name + " returned in " + (endTime-startTime) + "ms.");  }  private void startTimer() {    startTime = System.currentTimeMillis();  }}